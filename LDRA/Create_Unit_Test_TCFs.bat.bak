@echo off
setlocal enableextensions enabledelayedexpansion
rem +-------------------------------------------------------------+
rem |    Author : M.W.Richardson                                  |
rem |    Date   : 19/11/2021                                      |
rem |                                                             |
rem | Program to read a tcf file for a set and then to create     |
rem | a tcf file for each file in the set that can then be used   |
rem | to make it simpler to create test cases for that file.      |
rem |                                                             |
rem | Each created set is then analaysed and a light grey box     |
rem | sequence tcf is then created for each function that         |
rem | isolates the function.                                      |
rem |                                                             |
rem | Testers can then use "new from sequence" to start creating  |
rem | tests. Finally they would export the sequence overwriting   |
rem | the original one.                                           |
rem |                                                             |
rem | If the batch file is re-run, then any sequence that was     |
rem | exported from TBrun will not be modified.                   |
rem |                                                             |
rem |    Copyright (C) 2021 Liverpool Data Research Associates    |
rem +-------------------------------------------------------------+

set TBED=C:\LDRA_Toolsuite_C_CPP_10.0.3
set WORK=C:\LDRA_Workarea_C_CPP_10.0.3
set PYTHON_PATH=%TBED%\Utils\Python
set SET_NAME=Cashregister

set ROOT=%~dp0
set TCF_ROOT=%ROOT%UnitTests
set PATH=%PYTHON_PATH%;%TBED%;%PATH%
set START_TIME=%TIME%

set COMPILER=MinGW200 GCC C/C++ v3.2

set TBI=start "ldra" /wait /min TBini.exe
set TBS=%TBI% /Section="C/C++ %COMPILER% LDRA Testbed"
if exist "%TBED%\contestbed.exe" set TOOL=start "ldra" /wait /min contestbed
if exist "%TBED%\conunit.exe" set TOOL=start "ldra" /wait /min conunit

if exist %ROOT%\Create_Unit_Test_TCFs.log del /F %ROOT%\Create_Unit_Test_TCFs.log

rem First check that all the files, paths etc exist
rem ===============================================
if not exist "%PYTHON_PATH%\python.exe" (
  @echo Requires Python 2.7 or above
  pause
  exit
)

if not exist %SET_NAME%.tcf (
  @echo Can't find %SET_NAME%.tcf
  pause
  exit
)

if exist "%TCF_ROOT%" (
  @echo The folder %TCF_ROOT% already exists
  pause
  exit
) else (
  md "%TCF_ROOT%"
)

if not exist "%TBED%\Generate_xml.exe" (
  copy %WORK%\Examples\Workshops\Generate_xml\Release\Generate_xml.exe %TBED%\Generate_xml.exe
)


@echo Creating set tcf's from %SET_NAME%.tcf
python.exe "%cd%\Create_Unit_Test_TCFs.py" %SET_NAME%

%TOOL% -clear_locks

@echo Set the compiler
%TBI% COMPILER_SELECTED="%COMPILER%"
@echo Setting options for TBrun
%TBS% CSTANDARDS_MODEL=TBrun Requires
%TBS% CEXTERNAL_STANDARD=TBrun Requires
%TBS% CPPSTANDARDS_MODEL=TBrun Requires
%TBS% CPPEXTERNAL_STANDARD=TBrun Requires
%TBS% FILE_LIMIT=1
%TBS% TIMEOUT=5
%TBS% TBRUN_SUPRESS_STDOUT=TRUE
%TBS% ENABLE_ALL_STANDARDS=FALSE
%TBS% METRICS_DRIVER=0
%TBS% METRICS_SYS_DRIVER=0
%TBS% QUALITY_DRIVER=0
%TBS% QUALITY_SYS_DRIVER=0
%TBI% USER_STANDARDS_GENERATOR=

@echo Generate TCFs
for %%i in (%TCF_ROOT%\*.tcf) do (
  call :create_tcfs %%i
)

@echo Restoring Settings
%TBS% CSTANDARDS_MODEL=MISRA-C:2012
%TBS% CEXTERNAL_STANDARD=MISRA-C:2012
%TBS% CPPSTANDARDS_MODEL=MISRA-C++:2008
%TBS% CPPEXTERNAL_STANDARD=MISRA-C++:2008
%TBS% METRICS_DRIVER=2
%TBS% METRICS_SYS_DRIVER=1
%TBS% QUALITY_DRIVER=2
%TBS% QUALITY_SYS_DRIVER=2
%TBS% FILE_LIMIT=32
%TBS% TIMEOUT=60

set END_TIME=%TIME%
set options="tokens=1-4 delims=:.,"
for /f %options% %%a in ("%START_TIME%") do set start_h=%%a&set /a start_m=100%%b %% 100&set /a start_s=100%%c %% 100&set /a start_ms=100%%d %% 100
for /f %options% %%a in ("%END_TIME%") do set end_h=%%a&set /a end_m=100%%b %% 100&set /a end_s=100%%c %% 100&set /a end_ms=100%%d %% 100

set /a hours=%end_h%-%start_h%
set /a mins=%end_m%-%start_m%
set /a secs=%end_s%-%start_s%
set /a ms=%end_ms%-%start_ms%

if %ms% lss 0 set /a secs = %secs% - 1 & set /a ms = 100%ms%
if %secs% lss 0 set /a mins = %mins% - 1 & set /a secs = 60%secs%
if %mins% lss 0 set /a hours = %hours% - 1 & set /a mins = 60%mins%
if %hours% lss 0 set /a hours = 24%hours%
if 1%ms% lss 100 set ms=0%ms%

@echo Time taken %hours%:%mins%:%secs%
pause

@echo.
exit /B


rem +------------------------------------------------------------+
rem | Subroutine to create test cases for all functions in a set |
rem +------------------------------------------------------------+

:create_tcfs
set SET_TCF=%1
set SET_NAME=%~n1

set TCF=%TCF_ROOT%\%SET_NAME%
if not exist "%TCF%" (
  md %TCF%
)

@echo Running analysis on %SET_NAME%
%TOOL% %SET_TCF% /112a34q


if exist %WORK%\%SET_NAME%_tbwrkfls\%SET_NAME%.glh (
  set GLH=%WORK%\%SET_NAME%_tbwrkfls\%SET_NAME%.glh
) else (
  set GLH=%WORK%\%SET_NAME%_tbwrkfls\%SET_NAME%.ldra
)
set XML=%WORK%\%SET_NAME%_tbwrkfls\%SET_NAME%.xml

start /wait "ldra" /min Generate_xml.exe %GLH%

python.exe "Create_Unit_Test_TCFs_for_each_function.py" %SET_NAME% %XML% %TCF%

exit /B

